package eu.neclab.iotplatform.iotbroker.commons.interfaces;

import java.util.Date;
import java.util.List;
import java.util.Set;

import com.google.common.collect.Multimap;

import eu.neclab.iotplatform.ngsi.api.datamodel.ContextElement;
import eu.neclab.iotplatform.ngsi.api.datamodel.EntityId;

public interface EmbeddedAgentIndexerInterface {

	/**
	 * This method will calculate a multimap containing all the entities with
	 * its attributes that are matching the EntityId criteria given as input. It
	 * supports pattern and filtering against EntityId type
	 * 
	 * @param entityId
	 * @return
	 */
	public abstract Multimap<String, String> matchingIdsAndAttributeNames(
			List<EntityId> entityIdList, Set<String> attributeNames);

	public abstract String generateKeyForHistoricalData(String entityId,
			String type, String attributeName, Date timestamp);

	/**
	 * IMPORTANT: id needs to be the one generated by generateId(String
	 * entityId, String type)
	 * 
	 * @param id
	 *            The full Id composed by generateId(String entityId, String
	 *            type)
	 * @param attributeName
	 * @param timestamp
	 * @return
	 */
	public abstract String generateKeyForHistoricalData(String id,
			String attributeName, Date timestamp);

	public abstract String generateKeyForLatestValue(String entityId,
			String type, String attributeName);

	public abstract String generateKeyForLatestValue(
			ContextElement isolatedContextElement);

	/**
	 * IMPORTANT: id needs to be the one generated by generateId(String
	 * entityId, String type)
	 * 
	 * @param id
	 *            The full Id composed by generateId(String entityId, String
	 *            type)
	 * @param attributeName
	 * @return
	 */
	public abstract String generateKeyForLatestValue(String id,
			String attributeName);

	/**
	 * It generated the id of the contextElement by concatenating entityId.id
	 * and entityId.type separate by the separator specified in the CouchDBUtil.
	 * If entityId.type is null or empty, the id will be just the entityId.id
	 * 
	 * @param entityId
	 * @param type
	 * @return the identifier
	 */
	public abstract String generateId(String entityId, String type);

	public abstract String generateId(EntityId entityId);

	/**
	 * Return an array of String where the first element is the entityId.id and
	 * the second element is the entity.type if present. If entity.type is not
	 * present the array will be composed by only one String, the entity.id
	 * 
	 * @param id
	 * @return
	 */
	public abstract String[] splitEntityAndType(String id);

	public abstract EntityId getEntityId(String id);

}